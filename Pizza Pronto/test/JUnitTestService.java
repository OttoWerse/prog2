import static org.junit.jupiter.api.Assertions.assertNotNull;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertTrue;import org.junit.platform.commons.support.ReflectionSupport;import de.thb.dim.pizzaPronto.businessObjects.Delivery;import de.thb.dim.pizzaPronto.businessObjects.IService;import de.thb.dim.pizzaPronto.businessObjects.Kitchen;import de.thb.dim.pizzaPronto.businessObjects.exceptions.NoCustomerException;import de.thb.dim.pizzaPronto.valueObjects.CustomerVO;import de.thb.dim.pizzaPronto.valueObjects.EmployeeVO;import de.thb.dim.pizzaPronto.valueObjects.Gender;import de.thb.dim.pizzaPronto.valueObjects.OrderVO;import de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO;import de.thb.dim.pizzaPronto.valueObjects.exceptions.CustomerTooYoungException;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import java.time.LocalDate;import java.time.LocalDateTime;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;/** * EmployeeVO and work are tested. *  * Requirement: OrderVO and menuVO are ok *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 2.0 03.04.2019 */public class JUnitTestService { 		private static OrderVO myOrder;	private static OrderVO myOrderWithoutCustomer;	private static IService[] services = new IService[2];	private static CustomerVO customer;		private static Class<Delivery> myDeliveryClass;	private static Method selectEmployee;	private static int modifiersSelectEmployee;		@BeforeEach	public void initEach() throws NoSuchFieldException, NullPointerException, CustomerTooYoungException {		int year, number;		// create chef		services[0] = new Kitchen();		// create delivery man		services[1] = new Delivery();		// create customer		customer = new CustomerVO("Genuss", "Gini", "HaribostraÃŸe", 32, Gender.F, LocalDate.of(1995, 8, 8));		// create order		year = LocalDate.now().getYear();		number = year * 100000 + 1;		myOrder = new OrderVO(number, StateOfOrderVO.STARTED, LocalDateTime.now(), customer);		customer.setOrder(myOrder);		myOrderWithoutCustomer = new OrderVO(number, StateOfOrderVO.STARTED, LocalDateTime.now(), null);	}	// Services	@Test	public void testKitchenWithOrderConfirmedWithCustomer() throws NoCustomerException {		myOrder.setState(StateOfOrderVO.CONFIRMED);		services[0].startService(myOrder);		assertEquals(StateOfOrderVO.READY, myOrder.getState(), "state of order changed to ready");	}		@Test	public void testKitchenWithoutCustomer() throws NoCustomerException {		myOrderWithoutCustomer.setState(StateOfOrderVO.CONFIRMED);	services[0].startService(myOrderWithoutCustomer);		assertEquals(StateOfOrderVO.READY, myOrderWithoutCustomer.getState(), "state of order is ready");	}	@Test	public void testKitchenWithOrderStartedIllegalStateException() {		Exception exception = Assertions.assertThrows( IllegalStateException.class, () ->		services[0].startService(myOrder));				assertTrue(exception.getMessage().contains("No order for processing available."));	}	@Test	public void testKitchenWithoutOrderNullPointerException() {				Exception exception = Assertions.assertThrows( NullPointerException.class, () ->		services[0].startService(null));				assertTrue(exception.getMessage().contains("No order available."));		assertEquals(StateOfOrderVO.STARTED, myOrder.getState(), "state of order remains started");	}	@Test	public void testKitchenWithOrderStartedWithoutCustomer()  {				StateOfOrderVO state = myOrderWithoutCustomer.getState();				Exception exception = Assertions.assertThrows( IllegalStateException.class, () ->		services[0].startService(myOrderWithoutCustomer));		assertTrue(exception.getMessage().contains("No order for processing available."),"No order for processing available.");		assertEquals(state, myOrderWithoutCustomer.getState(), "state of order remains started");	}	@Test	public void testDeliveryWithOrderReadyWithCustomer() throws NoCustomerException {		myOrder.setState(StateOfOrderVO.READY);		services[1].startService(myOrder);		assertEquals(StateOfOrderVO.DELIVERED, myOrder.getState(), "state of order changed to delivered");	}	@Test	public void testDeliveryWithOrderReadyWithoutCustomerNoCustomerException() {		myOrderWithoutCustomer.setState(StateOfOrderVO.READY);				Exception exception = Assertions.assertThrows( NoCustomerException.class, () ->		services[1].startService(myOrderWithoutCustomer));				assertTrue(exception.getMessage().contains("No customer available."));		assertEquals(StateOfOrderVO.READY, myOrderWithoutCustomer.getState(), "state of order remains ready");	}	@Test	public void testKitchenWithOrderConfirmedWithoutCustomer() throws NoCustomerException {				myOrder.setState(StateOfOrderVO.CONFIRMED);				services[0].startService(myOrder);				assertEquals(StateOfOrderVO.READY, myOrder.getState(), "state of order changed to ready");	}	@Test	public void testDeliveryWithoutOrderNullPointerException() {		Exception exception = Assertions.assertThrows( NullPointerException.class, () ->		 services[1].startService(null));				assertTrue(exception.getMessage().contains("No order available."), "Delivery: No order available.");		assertEquals(StateOfOrderVO.STARTED, myOrder.getState(), "state of order remains started");	}	@Test	public void testDeliveryWithOrderStartedWithoutCustomerNoCustomerException() {		StateOfOrderVO state = myOrderWithoutCustomer.getState();				Exception exception = Assertions.assertThrows( NoCustomerException.class, () ->		 services[1].startService(myOrderWithoutCustomer));				assertTrue(exception.getMessage().contains("No customer available."), "Delivery: No order available.");		assertEquals(state, myOrderWithoutCustomer.getState(), "state of order remains started");	}	@Test	public void testDeliveryWithOrderConfirmedWithoutCustomerNoCustomerException() {				myOrderWithoutCustomer.setState(StateOfOrderVO.CONFIRMED);				Exception exception = Assertions.assertThrows( NoCustomerException.class, () ->		services[1].startService(myOrderWithoutCustomer));		assertTrue(exception.getMessage().contains("No customer available."), "Delivery: No order available.");		assertTrue(exception.getMessage().contains("No customer available."), "Delivery: No order available.");assertEquals(StateOfOrderVO.CONFIRMED, myOrderWithoutCustomer.getState(), "state of order remains confirmed");	}	@Test	public void testDeliveryWithOrderConfirmedWithCustomerIllegalStateException()   {				myOrder.setState(StateOfOrderVO.CONFIRMED);				Exception exception = Assertions.assertThrows( IllegalStateException.class, () ->		services[1].startService(myOrder));		assertTrue(exception.getMessage().contains("No order is ready for processing."), "Delivery: No order is ready for processing.");		assertEquals(StateOfOrderVO.CONFIRMED, myOrder.getState(), "state of order remains confirmed");	}		@Test	public void testDeliveryWithOrderStartedWithCustomerIllegalStateException()   {				myOrder.setState(StateOfOrderVO.STARTED);				Exception exception = Assertions.assertThrows( IllegalStateException.class, () ->		services[1].startService(myOrder));		assertTrue(exception.getMessage().contains("No order is ready for processing."), "Delivery: No order is ready for processing.");		assertEquals(StateOfOrderVO.STARTED, myOrder.getState(), "state of order remains confirmed");	}	@Test	public void testDeliveryEmployees() {		EmployeeVO employees[];		employees = ((Delivery) services[1]).getEmployees();		assertTrue(employees.length >= 2, "At least 2 employees");		assertNotNull(employees[0], "Employee objects in arrray");		assertNotNull(employees[1], "Employee objects in arrray");	}	@Test	public void testDeliverySelectEmployeeIsPrivate() throws NoSuchMethodException {		myDeliveryClass = Delivery.class;		selectEmployee = myDeliveryClass.getDeclaredMethod("selectEmployee");		modifiersSelectEmployee = selectEmployee.getModifiers();		assertTrue(Modifier.isPrivate(modifiersSelectEmployee), "Methode selectEmployee of Delivery is private");	}	@Test	public void testDeliverySelectEmployee() throws NoSuchMethodException {		EmployeeVO employee;		myDeliveryClass = Delivery.class;		selectEmployee = myDeliveryClass.getDeclaredMethod("selectEmployee");		modifiersSelectEmployee = selectEmployee.getModifiers();		employee = (EmployeeVO) ReflectionSupport.invokeMethod(selectEmployee, (Delivery) services[1]);		assertNotNull(employee, "Employee objects of Delivery are selected");	}}