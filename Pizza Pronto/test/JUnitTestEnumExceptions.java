import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import org.junit.BeforeClass;import org.junit.Test;import de.thb.dim.pizzaPronto.businessObjects.exceptions.NoCustomerException;import de.thb.dim.pizzaPronto.businessObjects.exceptions.NoOrderException;import de.thb.dim.pizzaPronto.valueObjects.Gender;import de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO;import de.thb.dim.pizzaPronto.valueObjects.exceptions.CustomerNoDateOfBirthException;import de.thb.dim.pizzaPronto.valueObjects.exceptions.CustomerTooYoungException;import static org.junit.Assert.*;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertTrue;/** * Enums are testet. *  *  * @author Gabriele Schmidt * @version 1.0 8.05.2015 */public class JUnitTestEnumExceptions {	private static Class<Gender> myGenderClass;	private static Class<StateOfOrderVO> myStateOfOrderVO;	@BeforeClass	public static void setUpBeforeClass() throws Exception {		myGenderClass = Gender.class;		myStateOfOrderVO = StateOfOrderVO.class;	}		@Test	public void isCheckedExceptions() {		Class<CustomerNoDateOfBirthException> noDateOfBirthException = CustomerNoDateOfBirthException.class;		assertTrue(noDateOfBirthException.getSuperclass().toString().equals("class java.lang.Exception"),				"CustomerNoDateOfBirthException ist eine checked Exception");		Class<CustomerTooYoungException> customerTooYoungException = CustomerTooYoungException.class;		assertTrue(customerTooYoungException.getSuperclass().toString().equals("class java.lang.Exception"),				"CustomerTooYoungException ist eine checked Exception");		Class<NoOrderException> noOrderException = NoOrderException.class;		assertTrue(noOrderException.getSuperclass().toString().equals("class java.lang.Exception"),				"NoOrderException ist eine checked Exception");		Class<NoCustomerException> noCustomerException = NoCustomerException.class;		assertTrue(noCustomerException.getSuperclass().toString().equals("class java.lang.Exception"),				"NoCustomerException ist eine checked Exception");	}	@Test	public void superCallinExceptions() {		String text = "Test";			CustomerNoDateOfBirthException customerNoDateOfBirthException = new CustomerNoDateOfBirthException(text);		assertEquals(text,				customerNoDateOfBirthException.getMessage(),"super-call in initialition constructor in exception");		CustomerTooYoungException customerTooYoungException = new CustomerTooYoungException(text);		assertEquals( text, customerTooYoungException.getMessage(),"super-call in initialition constructor in exception");		NoOrderException noOrderException = new NoOrderException(text);		assertEquals( text, noOrderException.getMessage(),"super-call in initialition constructor in exception");		NoCustomerException noCustomerException = new NoCustomerException(text);		assertEquals( text, noCustomerException.getMessage(),"super-call in initialition constructor in exception");	}	@Test	public void TestGenderIsEnum() {		assertTrue("Gender is Enum", myGenderClass.isEnum());	}	@Test	public void testGenderAllConstants() {		Field[] fields = myGenderClass.getDeclaredFields();		assertEquals(fields[0].toString(),				"public static final de.thb.dim.pizzaPronto.valueObjects.Gender de.thb.dim.pizzaPronto.valueObjects.Gender.M",				"Gender.M is a constant");		assertEquals(fields[1].toString(),				"public static final de.thb.dim.pizzaPronto.valueObjects.Gender de.thb.dim.pizzaPronto.valueObjects.Gender.F",				"Gender.F a is a constant");		assertEquals(fields[2].toString(),				"public static final de.thb.dim.pizzaPronto.valueObjects.Gender de.thb.dim.pizzaPronto.valueObjects.Gender.I",				"Gender.I is a constant");		assertEquals(fields[3].toString(),				"public static final de.thb.dim.pizzaPronto.valueObjects.Gender de.thb.dim.pizzaPronto.valueObjects.Gender.U",				"Gender.U is a constant");	}	@Test	public void testGenderConstructor() {		Constructor<?>[] constructors = myGenderClass.getDeclaredConstructors();		int modifiersConstructor = constructors[0].getModifiers();		assertTrue("Constructor is private", Modifier.isPrivate(modifiersConstructor));		assertEquals("Only one constructor", 1, constructors.length);	}	@Test	public void testGenderMethods() {		Method[] methoden = myGenderClass.getDeclaredMethods();		assertEquals(methoden[0].toString(),				"public java.lang.String de.thb.dim.pizzaPronto.valueObjects.Gender.toString()",				"toString()-Method");		assertEquals(methoden[3].toString(), "public int de.thb.dim.pizzaPronto.valueObjects.Gender.toNumber()",				"toNumber()-Methode");	}	@Test	public void testGenderAttributes() {		Field[] fields = myGenderClass.getDeclaredFields();		assertEquals(fields[4].toString(),				"private final int de.thb.dim.pizzaPronto.valueObjects.Gender.number", "Attribut number: private final int");	}		@Test	public void testGendertoSting() {		assertTrue(Gender.M.toString().equals("male"),"toString in Gender is ok");		assertTrue(Gender.F.toString().equals("female"),"toString in Gender is ok");		assertTrue(Gender.I.toString().equals("intersex"),"toString in Gender is ok");		assertTrue(Gender.U.toString().equals("unknown"),"toString in Gender is ok");	}		@Test	public void testGendertoNumber() {		assertTrue(Gender.M.toNumber() == 1,"toNumber in Gender is ok");		assertTrue(Gender.F.toNumber() == 2,"toString in Gender is ok");		assertTrue(Gender.I.toNumber() == 3,"toString in Gender is ok");		assertTrue(Gender.U.toNumber() == 4,"toString in Gender is ok");	}	@Test	public void testStateOfOrderVOIsEnum() {		assertTrue("StateOfOrderVO ist ein Enum", myStateOfOrderVO.isEnum());	}	@Test	public void testStateOfOrderVOAttributes() {		Field[] fields = myStateOfOrderVO.getDeclaredFields();						assertTrue(fields[0].toString().equals(				"public static final de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO.STARTED"),				"public static final de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO.STARTED");				assertTrue(fields[1].toString().equals(				"public static final de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO.CONFIRMED"),				"public static final de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO.CONFIRMED");				assertTrue(fields[2].toString().equals(				"public static final de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO.READY"),				"public static final de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO.READY");				assertTrue(fields[3].toString().equals(				"public static final de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO.DELIVERED"),				"public static final de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO.DELIVERED");				assertTrue(fields[4].toString().equals(				"public static final de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO.FINISHED"),				"public static final de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO.FINISHED");			}		}