import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertTrue;import java.lang.reflect.Field;import java.time.LocalDate;import java.time.LocalDateTime;import java.util.LinkedList;import java.util.List;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import de.thb.dim.pizzaPronto.businessObjects.Delivery;import de.thb.dim.pizzaPronto.businessObjects.IService;import de.thb.dim.pizzaPronto.businessObjects.Kitchen;import de.thb.dim.pizzaPronto.valueObjects.CustomerVO;import de.thb.dim.pizzaPronto.valueObjects.DishVO;import de.thb.dim.pizzaPronto.valueObjects.Gender;import de.thb.dim.pizzaPronto.valueObjects.MenuVO;import de.thb.dim.pizzaPronto.valueObjects.OrderVO;import de.thb.dim.pizzaPronto.valueObjects.PizzaVO;import de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO;import de.thb.dim.pizzaPronto.valueObjects.exceptions.CustomerTooYoungException;/** * EmployeeVO and work are tested. *  * Requirement: OrderVO and menuVO are ok *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 2.0 03.04.2019 */public class JUnitTestOrderVO {	private static Class<OrderVO> myOrderClass;	private static OrderVO myOrder;		private static IService[] services = new IService[2];	private static CustomerVO customer;	private static MenuVO menuVO;	private static Field shoppingBasket;		private static Field state;		@BeforeEach	public void initEach() throws NoSuchFieldException, NullPointerException, CustomerTooYoungException {		int year, number;		// create chef		services[0] = new Kitchen();		// create delivery man		services[1] = new Delivery();		// create customer		customer = new CustomerVO("Genuss", "Gini", "Haribostraße", 32, Gender.F, LocalDate.of(1995, 8, 8));		// create order		year = LocalDate.now().getYear();		number = year * 100000 + 1;		myOrder = new OrderVO(number, StateOfOrderVO.STARTED, LocalDateTime.now(), customer);		customer.setOrder(myOrder);		menuVO = new MenuVO();		myOrderClass = OrderVO.class;		shoppingBasket = myOrderClass.getDeclaredField("shoppingBasket");				state = myOrderClass.getDeclaredField("state");	}	// OrderVO	@Test	public void testOrderVOShoppingBasketDataType() {		assertTrue(shoppingBasket.getType().toString().equals("interface java.util.List"),				"shoppingBasket in OrderVO is an array of type DishVO");	}		@Test	public void testOrderVOStateDataType() {					assertTrue(state.getType().toString().equals("class de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO"),				"state in OrderVO is type  StateOfOrderVO");	}	@Test	public void testOrderVOShoppingBasketNotFull() {		myOrder.addDish(menuVO.getDish(0));		myOrder.setTimestampDeliveredOrder(LocalDateTime.now());		String s = myOrder.toString();		assertFalse(s.contains("null"), "ToString() does not contains empty elements of shopping baskets, i.e. null.");	}		@Test	public void testOrderVOSetGetShoppingBasketDishVO() {		List <DishVO> dishes = new LinkedList <DishVO>();		// add a dish from MenuVO		dishes.add( menuVO.getDish(0));		dishes.add( menuVO.getDish(1));		myOrder.setShoppingBasket(dishes);		assertEquals(dishes,myOrder.getShoppingBasket(),"Setter and Getter use DishVO[]");	}	@Test	public void testOrderVOStateConfirmed() {		assertEquals(StateOfOrderVO.STARTED, myOrder.getState(), "state in OrderVO is started after starting");	}	@Test	public void testOrderVONumber() {		int test = myOrder.getOrderNo();		String s = Integer.toString(test);		String year = Integer.toString(LocalDate.now().getYear());		assertTrue(s.contains(year), "Correc year is part of the identifier");	}	@Test	public void testOrderVOAddDish() {		// add a dish from MenuVO		myOrder.addDish(menuVO.getDish(0));		assertEquals(1, myOrder.getNumberOfDishes(), "Number of dishes in OrderVO: 1");	}	@Test	public void testOrderVOAddManyDishes() {		int countDishes;		final int  MAX = 30;		// add all MAX dishes of menuVO		for (countDishes = 0; countDishes < MAX ; countDishes++) {			myOrder.addDish(menuVO.getDish(countDishes % menuVO.getNumberOfDishes()));		}		assertEquals(countDishes, myOrder.getNumberOfDishes(), "Number of dishes in OrderVO are variable");		// add one more dish of menuVO		myOrder.addDish(menuVO.getDish(0));	}	@Test	public void testOrderVOEqualsMethod() {		OrderVO otherOrder = myOrder; // Identität		// add all 18 dishes of menuVO		for (int i = 0; i < menuVO.getNumberOfDishes(); i++) {			myOrder.addDish(menuVO.getDish(i));			otherOrder.addDish(menuVO.getDish(i));		}		assertEquals(myOrder, otherOrder, " OrderVO equals new OrderVO");	}	@Test	public void testOrderVOCalculateTotalPrice() {		float price = 7.00f;		int countDishes;		final int  MAX = 30;		// add all MAX dishes of menuVO		for (countDishes = 0; countDishes < MAX ; countDishes++) { 			myOrder.addDish(					new PizzaVO(30, "Popeye", new String[] { "Schinken", "Spinat", "Champignon", "Ei" }, price, 1));		}		assertTrue((price * countDishes) == myOrder.calculatePriceDishes(),				" price is calculated correctly ");	}	@Test	public void testOrderVODeleteDishIndex() {		int index = 0;		myOrder.addDish(menuVO.getDish(index));		myOrder.deleteDish(index);		assertEquals(index, myOrder.getNumberOfDishes(), "after method call deleteDish() in OrderVO size is 0.");	}		@Test	public void testOrderVODeleteDishObject() {		int index = 0;				myOrder.addDish(menuVO.getDish(index));		myOrder.addDish(menuVO.getDish(index + 1));		myOrder.deleteDish(menuVO.getDish(index));		assertFalse(myOrder.getShoppingBasket().contains(menuVO.getDish(index)), "after method call deleteDish() object is deleted.");		assertTrue(myOrder.getShoppingBasket().contains(menuVO.getDish(index + 1)), "after method call deleteDish() other objects are not deleted.");	}		@Test	public void testOrderVODeleteDishObjectNull() {			myOrder.deleteDish(null);			}		@Test	public void testOrderVOGetDishWithNoDishAtIndexIndexOutOfBoundsException() {		int index = 0;		Assertions.assertThrows(IndexOutOfBoundsException.class, () ->		myOrder.getDish(index));	}	@Test	public void testOrderVOGetDishWithWrongtIndexIndexOutOfBoundsException() {		Assertions.assertThrows(IndexOutOfBoundsException.class, () ->		myOrder.getDish(10000));	}}