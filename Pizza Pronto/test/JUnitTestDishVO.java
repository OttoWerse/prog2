import static org.junit.jupiter.api.Assertions.assertArrayEquals;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertTrue;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import de.thb.dim.pizzaPronto.valueObjects.DessertVO;import de.thb.dim.pizzaPronto.valueObjects.DishVO;import de.thb.dim.pizzaPronto.valueObjects.PastaVO;import de.thb.dim.pizzaPronto.valueObjects.PizzaVO;/** * The methods of the class PizzaVO are tested. *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 2.0 04.02.2017 */public class JUnitTestDishVO {	private static DishVO dishIni, dishWithout;		private static DishVO dishX, dishY, dishZ;	@BeforeEach	public void initEach() {		dishIni = new PizzaVO(30,"Marghrita",new String [] {"Tomaten","Käse","Basilikum"},8.0f);		dishWithout = new PizzaVO();	}		@Test	public void DishVOIngredients() {		assertArrayEquals( new String [] {"Tomaten","Käse","Basilikum"},dishIni.getIngredients(),				dishIni.getClass()				+ " checks the incredients");	}		@Test	public void DishVOSetIngredients() {		String s [] = {"Tomaten","Käse","Anchovis"};				dishWithout.setIngredients(s);				assertArrayEquals(s, dishWithout.getIngredients(),				dishWithout.getClass()				+ " checks the setter of incredients");	}		@Test	public void testDishVOSetName() {		String name = "Anchovi";				dishWithout.setName(name);				assertEquals(name, dishWithout.getName(), dishWithout.getClass() +				" checks the setter of name");	}		@Test	public void testDishVOSetPrice() {		float price = 10.5f;		dishWithout.setPrice(price);		assertEquals(price,dishWithout.getPrice(),dishWithout.getClass()				+ " checks the setter of price sets to a possitive price");	}		@Test	public void testDishVOSetNegativePrice() {		dishWithout.setPrice(-10.5f);		assertEquals(0f,dishWithout.getPrice(), dishWithout.getClass()				+ " checks the setter of price sets no negative price");	}	@Test	public void testDishVOValues() {		assertTrue(				dishIni.getPrice() >= 0,dishIni.getClass() + " not a negative price ");			}		@Test	public void testPizzaVOVOEquals() {		dishX = new PizzaVO(30,"Marghrita",new String [] {"Tomaten","K�se","Basilikum"},8.0f);		dishY =  new PizzaVO(30,"Marghrita",new String [] {"Tomaten","K�se","Basilikum"},8.0f);		dishZ =  new PizzaVO(30,"Marghrita",new String [] {"Tomaten","K�se","Basilikum"},8.0f);				//For any non-null reference value x, x.equals(null) should return false. 		assertFalse( dishX.equals(null),"For any non-null reference value x, x.equals(null) should return false.");						//Tow Objects		assertTrue( dishY != dishX, dishY.getClass() + " erstellt mit dem Initialisierungskonstruktor neue Objekte ");				//It is reflexive: for any non-null reference value x, x.equals(x) should return true. 		assertTrue(dishY.equals(dishY), "It is reflexive: for any non-null reference value x, x.equals(x) should return true. ");				//It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true.  		assertTrue(dishX.equals(dishY) == dishY.equals(dishX), "It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true. ");					//It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true.   		assertTrue((dishX.equals(dishY) && dishY.equals(dishZ)) ? dishX.equals(dishZ): false, "It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. " );					//Equals		assertTrue( dishY.equals(dishX),dishY.getClass() + " equals arbeitet bei gleichen Objekten richtig ");				assertTrue( dishY.equals(dishY),dishY.getClass() + " equals arbeitet bei identischen Objekten richtig ");				dishZ.setPrice(8.50f);		assertFalse( dishZ.equals(dishX),dishZ.getClass() + " equals arbeitet bei ungleichen Objekten richtig ");				assertFalse( dishZ.equals(new PizzaVO()),dishZ.getClass() + " equals arbeitet bei falschen Objekten (Nicht-" + dishZ.getClass() + " richtig ");	}		@Test	public void testPizzaVOClone() {		dishX =  new PizzaVO(30,"Marghrita",new String [] {"Tomaten","K�se","Basilikum"},8.0f);		dishY = (PizzaVO) dishX.clone();				//For any non-null reference value x, x.equals(null) should return false. 		assertFalse( dishX.equals(null),"For any non-null reference value x, x.equals(null) should return false.");						//Two Objects		assertTrue( dishY != dishX, dishY.getClass() + " erstellt mit clone neue Objekte ");				//Equals		assertTrue( dishY.equals(dishX),dishY.getClass() + " equals arbeitet bei gleichen Objekten richtig ");				assertTrue( dishY.equals(dishY),dishY.getClass() + " equals arbeitet bei identischen Objekten richtig ");			}		@Test	public void testPizzaVOVOCloneDeepCopy() {		dishX =  new PizzaVO(30,"Marghrita",new String [] {"Tomaten","K�se","Basilikum"},8.0f);		dishY = (PizzaVO) dishX.clone();				assertEquals( dishY.getName(),dishX.getName()," Echte Kopie erstellt mit clone. ");		assertEquals( dishY.getNameOfDish(),dishX.getNameOfDish()," Echte Kopie erstellt mit clone. ");		assertEquals( dishY.getNumber(),dishX.getNumber()," Echte Kopie erstellt mit clone. ");		assertEquals( dishY.getNumberOfDish(),dishX.getNumberOfDish()," Echte Kopie erstellt mit clone. ");		assertEquals( dishY.getPrice(),dishX.getPrice()," Echte Kopie erstellt mit clone. ");		assertEquals(((PizzaVO)dishY).getSize(),((PizzaVO)dishY).getSize()," Echte Kopie erstellt mit clone. ");		assertArrayEquals( dishY.getIngredients(),dishX.getIngredients(),"Echte Kopie erstellt mit clone. ");				}			@Test	public void testPizzaVOEqualsHashCode() {		dishX = new PizzaVO(30,"Marghrita",new String [] {"Tomaten","K�se","Basilikum"},8.0f);		dishY = new PizzaVO(30,"Marghrita",new String [] {"Tomaten","K�se","Basilikum"},8.0f);		//Simliar objects provide similar hashcode		assertTrue(dishX.equals(dishY) == ( dishX.hashCode() == dishY.hashCode()),"Gleiche Objekte liefern den gleichen HashCode");		}	@Test	public void testDishVOIngredientsToString() {		String name =  "Popeye";		DishVO pizza = new PizzaVO(30, name, new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, 1);		assertTrue(((DishVO)pizza).ingredientsToString().contains("Schinken, Spinat, Champignon, Ei"),"DishVO implements ingredientsToString() correctly");	}		@Test	public void testDishVOIngredientsToStringNull() {		String name =  "Popeye";		DishVO pizza = new PizzaVO(30, name, null, 8.90f, 1);		System.out.println(pizza.ingredientsToString());		assertTrue(((DishVO)pizza).ingredientsToString().contains(""),"DishVO implements ingredientsToString() correctly");	}		@Test	public void testDishVOToString() {		String name =  "Popeye";		DishVO pizza = new PizzaVO(30, name, new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, 1);		assertTrue(((DishVO)pizza).toString().contains(pizza.getNameOfDish()),"DishVO toString() ruft getNameOfDish() auf.");	}		@Test	public void testPizzaVONumber() {		int number = 30;		PizzaVO pizza = new PizzaVO(number, "Popeye", new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, 2);		assertEquals(number,pizza.getNumber(),"Number of pizza");	}		@Test	public void testPizzaVOSize1() {		int size = 1;		PizzaVO pizza = new PizzaVO(30, "Popeye", new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, size);		assertEquals( size,pizza.getSize(),"Size of pizza");	}		@Test	public void testPizzaVOSize2() {		int size = 2;		PizzaVO pizza = new PizzaVO(30, "Popeye", new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, size);		assertEquals( size,pizza.getSize(),"Size of pizza");	}		@Test	public void testPizzaVOCompareTo() {		PizzaVO pizzaA1 = new PizzaVO(30, "A", new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, 1);		PizzaVO pizzaA2 = new PizzaVO(30, "A", new String[] { "Schinken",				"Spinat", "Champignon"}, 8.40f, 1);		PizzaVO pizzaB = new PizzaVO(30, "B", new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, 1);		PizzaVO pizzaC = new PizzaVO(30, "C", new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, 1);		assertTrue( pizzaA1.compareTo(pizzaA2) == 0,"compareTo with equal names => excepted == 0");		assertTrue(pizzaB.compareTo(pizzaA2) > 0,"compareTo with  names B and A => excepted > 0");		assertTrue(pizzaB.compareTo(pizzaC) < 0,"compareTo with  names B and C => excepted < 0");	}		@Test	public void testPizzaVOCompareToEquals() {		PizzaVO pizzaA1 = new PizzaVO(30, "A", new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, 1);		PizzaVO pizzaA2 = new PizzaVO(30, "A", new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, 1);		assertTrue( pizzaA1.compareTo(pizzaA2) == 0 &&  pizzaA1.equals(pizzaA2),"compareTo with equal names");			}		@Test	public void testPizzaVONumberOfDishSize1() {		int number = 30;		int size = 1;		int numberOfDish = number * 10 + size;		PizzaVO pizza = new PizzaVO(number, "Popeye", new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, size);		assertEquals( numberOfDish,pizza.getNumberOfDish(),"Number of dish in Pizza");	}		@Test	public void testPizzaVONumberOfDishSize2() {		int number = 31;		int size = 2;		int numberOfDish = number * 10 + size;		PizzaVO pizza = new PizzaVO(number, "Popeye", new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, size);		assertEquals( numberOfDish,pizza.getNumberOfDish(),"Number of dish in Pizza");	}		@Test	public void testPizzaVOName() {		String name =  "Popeye";		PizzaVO pizza = new PizzaVO(30, name, new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, 2);		assertEquals(name,pizza.getName(),"Name of Pizza");	}		@Test	public void testPizzaVONameOfDishGrande() {		String name =  "Popeye";		PizzaVO pizza = new PizzaVO(30, name, new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, 2);		assertTrue(pizza.getNameOfDish().contains(name),"Dish name of pizza contains correct name");		assertTrue(pizza.getNameOfDish().contains("Grande"),"Dish name of pizza contains grande");		assertTrue(pizza.getNameOfDish().contains("Pizza"),"Dish name of pizza contains Pizza");	}		@Test	public void testPizzaVONameOfDishNormal() {		String name =  "Popeye";		PizzaVO pizza = new PizzaVO(30, name, new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, 1);		assertTrue(pizza.getNameOfDish().contains(name),"Dish name of pizza contains correct name");		assertTrue(pizza.getNameOfDish().contains("Normal"),"Dish name of pizza contains normal");		assertTrue(pizza.getNameOfDish().contains("Pizza"),"Dish name of pizza contains Pizza");	}			@Test	public void testPastaVONumber() {		int number = 12;		PastaVO pasta =new PastaVO(number, "Bolognese",				new String[] { "Hackfleischsauce" }, 6.40f, 4);		assertEquals(number,pasta.getNumber(),"Number of dish in Pasta");	}		@Test	public void testPastaVOType4() {		int type = 4;		PastaVO pasta =new PastaVO(12, "Bolognese",				new String[] { "Hackfleischsauce" }, 6.40f, type);		assertEquals(type,pasta.getTypeOfPasta(), "Type of dish in Pasta");	}		@Test	public void testPastaVOType5() {		int type = 5;		PastaVO pasta =new PastaVO(12, "Bolognese",				new String[] { "Hackfleischsauce" }, 6.40f, type);		assertEquals(type,pasta.getTypeOfPasta(), "Type of dish in Pasta");	}		@Test	public void testPastaVOType6() {		int type = 6;		PastaVO pasta =new PastaVO(12, "Bolognese",				new String[] { "Hackfleischsauce" }, 6.40f, type);		assertEquals(type,pasta.getTypeOfPasta(), "Type of dish in Pasta");	}		@Test	public void testPastaVONumberOfDish() {		int number = 12;		int type = 4;		int numberOfDish = type * 100 + number;		PastaVO pasta =new PastaVO(number, "Bolognese",				new String[] { "Hackfleischsauce" }, 6.40f, type);		assertEquals(numberOfDish,pasta.getNumberOfDish(),"Number of dish in Pasta");	}		@Test	public void testPastaVOequals() {		dishX =  new PastaVO(12, "Bolognese",new String[] { "Hackfleischsauce" }, 6.40f, 4);		dishY =  new PastaVO(12, "Bolognese",new String[] { "Hackfleischsauce" }, 6.40f, 4);		dishZ =  new PastaVO(12, "Bolognese",new String[] { "Hackfleischsauce" }, 6.40f, 4);				//For any non-null reference value x, x.equals(null) should return false. 		assertFalse( dishX.equals(null),"For any non-null reference value x, x.equals(null) should return false.");						//Tow Objects		assertTrue( dishY != dishX, dishY.getClass() + " erstellt mit dem Initialisierungskonstruktor neue Objekte ");				//It is reflexive: for any non-null reference value x, x.equals(x) should return true. 		assertTrue(dishY.equals(dishY), "It is reflexive: for any non-null reference value x, x.equals(x) should return true. ");				//It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true.  		assertTrue(dishX.equals(dishY) == dishY.equals(dishX), "It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true. ");					//It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true.   		assertTrue((dishX.equals(dishY) && dishY.equals(dishZ)) ? dishX.equals(dishZ): false, "It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. " );					//Equals		assertTrue( dishY.equals(dishX),dishY.getClass() + " equals arbeitet bei gleichen Objekten richtig ");				assertTrue( dishY.equals(dishY),dishY.getClass() + " equals arbeitet bei identischen Objekten richtig ");				dishZ.setPrice(8.50f);		assertFalse( dishZ.equals(dishX),dishZ.getClass() + " equals arbeitet bei ungleichen Objekten richtig ");				assertFalse( dishZ.equals(new PizzaVO()),dishZ.getClass() + " equals arbeitet bei falschen Objekten (Nicht-" + dishZ.getClass() + " richtig ");	}		@Test	public void testPastaVOClone() {		dishX =  new PastaVO(12, "Bolognese",new String[] { "Hackfleischsauce" }, 6.40f, 4);		dishY = (PastaVO) dishX.clone();				//For any non-null reference value x, x.equals(null) should return false. 		assertFalse( dishX.equals(null),"For any non-null reference value x, x.equals(null) should return false.");						//Two Objects		assertTrue( dishY != dishX, dishY.getClass() + " erstellt mit clone neue Objekte ");				//Equals		assertTrue( dishY.equals(dishX),dishY.getClass() + " equals arbeitet bei gleichen Objekten richtig ");				assertTrue( dishY.equals(dishY),dishY.getClass() + " equals arbeitet bei identischen Objekten richtig ");			}		@Test	public void testPastaVOVOCloneDeepCopy() {		dishX =  new PastaVO(12, "Bolognese",new String[] { "Hackfleischsauce" }, 6.40f, 4);		dishY = (PastaVO) dishX.clone();				assertEquals( dishY.getName(),dishX.getName()," Echte Kopie erstellt mit clone. ");		assertEquals( dishY.getNameOfDish(),dishX.getNameOfDish()," Echte Kopie erstellt mit clone. ");		assertEquals( dishY.getNumber(),dishX.getNumber()," Echte Kopie erstellt mit clone. ");		assertEquals( dishY.getNumberOfDish(),dishX.getNumberOfDish()," Echte Kopie erstellt mit clone. ");		assertEquals( dishY.getPrice(),dishX.getPrice()," Echte Kopie erstellt mit clone. ");		assertEquals(((PastaVO)dishY).getTypeOfPasta(),((PastaVO)dishY).getTypeOfPasta()," Echte Kopie erstellt mit clone. ");		assertArrayEquals( dishY.getIngredients(),dishX.getIngredients(),"Echte Kopie erstellt mit clone. ");				}		@Test	public void testPastaVOName() {		String name =  "Bolognese";		PastaVO pasta =new PastaVO(12, name,				new String[] { "Hackfleischsauce" }, 6.40f, 4);		assertEquals(name,pasta.getName(),"Name of Pizza");	}		@Test	public void testPastaVONameOfDish4() {		String name =  "Bolognese";		PastaVO pasta =new PastaVO(12, name,				new String[] { "Hackfleischsauce" }, 6.40f, 4);		assertTrue(pasta.getNameOfDish().contains(name),"Dish name of pasta contains correct name");		assertTrue(pasta.getNameOfDish().contains("Spaghetti"),"Dish name of pasta contains Spaghetti");		assertTrue(pasta.getNameOfDish().contains("Pasta"),"Dish name of pasta contains Pasta");	}		@Test	public void testPastaVONameOfDish5() {		String name =  "Bolognese";		PastaVO pasta =new PastaVO(12, name,				new String[] { "Hackfleischsauce" }, 6.40f, 5);		assertTrue(pasta.getNameOfDish().contains(name),"Dish name of pasta contains correct name");		assertTrue(pasta.getNameOfDish().contains("Tortellini"),"Dish name of pasta contains Tortellini");		assertTrue(pasta.getNameOfDish().contains("Pasta"),"Dish name of pasta contains Pasta");	}		@Test	public void testPastaVONameOfDish6() {		String name =  "Bolognese";		PastaVO pasta =new PastaVO(12, name,				new String[] { "Hackfleischsauce" }, 6.40f, 6);		assertTrue(pasta.getNameOfDish().contains(name),"Dish name of pasta contains correct name");		assertTrue(pasta.getNameOfDish().contains("Gnocchi"),"Dish name of pasta contains Gnocchi");		assertTrue(pasta.getNameOfDish().contains("Pasta"),"Dish name of pasta contains Pasta");	}		@Test	public void testPastaVONameOfDish7() {		String name =  "Bolognese";		PastaVO pasta =new PastaVO(12, name,				new String[] { "Hackfleischsauce" }, 6.40f, 7);		assertTrue(pasta.getNameOfDish().contains(name),"Dish name of pasta contains correct name");		assertFalse(pasta.getNameOfDish().contains("Gnocchi"),"Dish name of pasta contains Gnocchi");		assertFalse(pasta.getNameOfDish().contains("Spaghetti"),"Dish name of pasta contains Spaghetti");		assertFalse(pasta.getNameOfDish().contains("Tortellini"),"Dish name of pasta contains Tortellini");		assertTrue(pasta.getNameOfDish().contains("Pasta"),"Dish name of pasta contains Pasta");	}		@Test	public void testDessertVONumber() {		int number = 12;		DessertVO dessert = new DessertVO(number, "Hausgemachter Obstsalat", 2.30f);		assertEquals(number,dessert.getNumber(),"Nubmer of dessert");	}		@Test	public void testDessertVOClone() {		dishX =  new DessertVO(12, "Hausgemachter Obstsalat", 2.30f);		dishY = (DessertVO) dishX.clone();				//For any non-null reference value x, x.equals(null) should return false. 		assertFalse( dishX.equals(null),"For any non-null reference value x, x.equals(null) should return false.");						//Two Objects		assertTrue( dishY != dishX, dishY.getClass() + " erstellt mit clone neue Objekte ");				//Equals		assertTrue( dishY.equals(dishX),dishY.getClass() + " equals arbeitet bei gleichen Objekten richtig ");				assertTrue( dishY.equals(dishY),dishY.getClass() + " equals arbeitet bei identischen Objekten richtig ");			}	@Test	public void testDessertVOCloneDeepCopy() {		dishX =  new DessertVO(12, "Hausgemachter Obstsalat", 2.30f);		dishY = (DessertVO) dishX.clone();				assertEquals( dishY.getName(),dishX.getName()," Echte Kopie erstellt mit clone. ");		assertEquals( dishY.getNameOfDish(),dishX.getNameOfDish()," Echte Kopie erstellt mit clone. ");		assertEquals( dishY.getNumber(),dishX.getNumber()," Echte Kopie erstellt mit clone. ");		assertEquals( dishY.getNumberOfDish(),dishX.getNumberOfDish()," Echte Kopie erstellt mit clone. ");		assertEquals( dishY.getPrice(),dishX.getPrice()," Echte Kopie erstellt mit clone. ");		assertArrayEquals( dishY.getIngredients(),dishX.getIngredients(),"Echte Kopie erstellt mit clone. ");		}					@Test	public void testDessertVONumberOfDish() {		DessertVO dessert = new DessertVO(21, "Hausgemachter Obstsalat", 2.30f);		assertEquals(dessert.getNumber(), dessert.getNumberOfDish(),"Dish number of dessert is identical to its number");	}		@Test	public void testDessertVOName() {		String name =  "Hausgemachter Obstsalat";		DessertVO dessert = new DessertVO(21, name, 2.30f);		assertEquals( name,dessert.getName(), "Name of dessert");	}		@Test	public void testDessertVONameOfDish() {		String name =  "Hausgemachter Obstsalat";		DessertVO dessert = new DessertVO(21, name, 2.30f);		assertTrue(dessert.getNameOfDish().contains(name),"dish name of dessert is identical to its name");	}	}