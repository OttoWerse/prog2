import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertNotEquals;import static org.junit.jupiter.api.Assertions.assertNotNull;import static org.junit.jupiter.api.Assertions.assertTrue;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.time.DateTimeException;import java.time.LocalDate;import java.time.LocalDateTime;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.BeforeAll;import org.junit.jupiter.api.Test;import de.thb.dim.pizzaPronto.valueObjects.CustomerVO;import de.thb.dim.pizzaPronto.valueObjects.Gender;import de.thb.dim.pizzaPronto.valueObjects.OrderVO;import de.thb.dim.pizzaPronto.valueObjects.PizzaVO;import de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO;import de.thb.dim.pizzaPronto.valueObjects.exceptions.CustomerNoDateOfBirthException;import de.thb.dim.pizzaPronto.valueObjects.exceptions.CustomerTooYoungException;/** * The methods of the class CustomerVO are tested. *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 2.0 04.02.2017 */public class JUnitTestCustomerVO {	private static CustomerVO customerDefault, customerIni;	private static CustomerVO customerX, customerY, customerZ;	private static Class<CustomerVO> myCustomerVOClass;		private static Field gender;		@BeforeAll	public static void initOnce() throws NoSuchFieldException, SecurityException, NullPointerException, CustomerTooYoungException{				customerDefault = new CustomerVO("NachnameDefault", "VornameDefault", LocalDate.of(1990, 5, 31));				customerX = new CustomerVO("Nachname", "Vorname", LocalDate.of(1990, 5, 31));		customerIni = new CustomerVO("Mampf", "Manfred", "Essensstraï¿½e", 42,				Gender.M, LocalDate.of(1990, 6, 28));				myCustomerVOClass = CustomerVO.class;				gender = myCustomerVOClass.getDeclaredField("gender");	}		@Test	public void testCustomerVOGenderDataType() {				System.out.println(gender.getType().toString());		assertTrue(gender.getType().toString().equals("class de.thb.dim.pizzaPronto.valueObjects.Gender"),				"gender in CustomerVO is type Gender");	}	@Test	public void testCustomerVONoSettersForIds() {		Method[] methods = myCustomerVOClass.getDeclaredMethods();		for (Method m : methods) {			assertNotEquals( 					"public  void CustomerVO.setId()", m.toString(), customerDefault.getClass() + " has no setter for id");			assertNotEquals("public static void CustomerVO.setNextId()", m.toString(),					 customerDefault.getClass() + " has no setter for nextId");		}	}	@Test	public void testCustomerVOStaticGetterForNextId() {		Method[] methods = myCustomerVOClass.getDeclaredMethods();		boolean staticGetterForNextId = false;		for (Method m : methods) {						if (m.toString().equals("public static int de.thb.dim.pizzaPronto.valueObjects.CustomerVO.getNextId()")) {				staticGetterForNextId = true;			}		}		assertEquals(true, staticGetterForNextId,  customerDefault.getClass() + " has a static getter for nextId" );	}		@Test	public void testCustomerVOGetterForLastName() {					assertEquals( 					customerX.getLastName(),"Nachname", "Getter for lastname is ok");		}		@Test	public void testCustomerVOGetterForFirstName() {					assertEquals( 					customerX.getFirstName(),"Vorname", "Getter for firstname is ok");		}		@Test	public void testCustomerVOHasOrderNULL() {					assertFalse( 					customerX.hasOrder(), "No Order");		}		@Test	public void testCustomerVOHasOrderTrue() {	OrderVO myOrder = new OrderVO(123, StateOfOrderVO.STARTED, LocalDateTime.now(), customerDefault);			assertFalse( 					customerDefault.hasOrder(), "No Order");			customerDefault.setOrder(myOrder);			assertTrue( 					customerDefault.hasOrder(), "Has order");			customerDefault.setOrder(null);		}		@Test	public void testCustomerVOSetterAndGetterForLastName() {			String  currentName = customerDefault.getLastName();			String  newName = "Neu";			customerDefault.setLastName(newName);			assertEquals( 					customerDefault.getLastName(),newName, "Setter and getter for lastname is ok");			customerDefault.setLastName(currentName);		}		@Test	public void testCustomerVOSetterAndGetterForFirstName() {		String  currentName = customerDefault.getFirstName();		String  newName = "Neu";		customerDefault.setFirstName(newName);			assertEquals( 					customerDefault.getFirstName(),newName, "Setter and getter for firstname is ok");			customerDefault.setFirstName(currentName);		}	@Test	public void testCustomerVOShortCalculateAge() {		Method[] methods = myCustomerVOClass.getDeclaredMethods();		boolean returnsShort = false;		for (Method m : methods) {			if (m.toString().equals("public short de.thb.dim.pizzaPronto.valueObjects.CustomerVO.calculateAge() throws de.thb.dim.pizzaPronto.valueObjects.exceptions.CustomerNoDateOfBirthException")) {				returnsShort = true;			}		}		assertEquals( true, returnsShort,  customerDefault.getClass() + " calculateAge returns short");	}	@Test	public void testCustomerVONoAttributeAge() {		Field[] fields = myCustomerVOClass.getDeclaredFields();		boolean attributeAge = false;		for (Field f : fields) {			if (f.toString().equals("private short CustomerVO.age")) {				attributeAge = true;			}		}		assertEquals( false, attributeAge, customerDefault.getClass() + " field age");	}	@Test	public void testCustomerVOId() throws NullPointerException, CustomerTooYoungException {		assertEquals( 0, customerDefault.getId(), customerDefault.getClass() + " has the ID 0");		assertEquals( 2, customerIni.getId(), customerIni.getClass() + " has the ID  1");		// IDs are increaded correctly		for (int i = CustomerVO.getNextId(); i < customerIni.getId() + 10; i++) {			customerDefault = new CustomerVO("NachnameDefault", "VornameDefault", LocalDate.of(1990, 5, 31));			assertEquals( i, customerDefault.getId(), customerDefault.getClass() + " has the ID  " + i);		}		// the once giben ID can't be changed		assertEquals( 2, customerIni.getId(),customerIni.getClass() + "  has the ID  1");	}		// set date of birth null		@Test		public void testCustomerVOSetDateOfBirthNull() {									Exception exception = Assertions.assertThrows(NullPointerException.class, () ->			customerIni.setDateOfBirth(null));						assertEquals("dob must not be null", exception.getMessage());		}				// set date  of birth null too young				@Test				public void testCustomerVOSetDateOfBirthTooYoung() {					int age = 16;					LocalDate today = LocalDate.now();					int year = today.getYear();					int month = today.getMonthValue();					int day = today.getDayOfMonth();										Exception exception = Assertions.assertThrows(CustomerTooYoungException.class, () ->					customerIni.setDateOfBirth(LocalDate.of(year - age, month, day)));										assertEquals("Customer is not an adult.", exception.getMessage());				}	@Test	public void testCustomerVOSetDateOfBirth() throws NullPointerException, CustomerTooYoungException {		int age = 31;		LocalDate today = LocalDate.now();		int year = today.getYear();		int month = today.getMonthValue();		int day = today.getDayOfMonth();		customerIni.setDateOfBirth(LocalDate.of(year - age, month, day));		assertEquals(year - age,				customerIni.getDateOfBirth().getYear(),  customerIni.getClass() + " has day of birth in the year " + (year - age) );				assertEquals( month,				customerIni.getDateOfBirth().getMonthValue(), customerIni.getClass() + " has day of birth in the month " + month);		assertEquals( day,				customerIni.getDateOfBirth().getDayOfMonth(), customerIni.getClass() + " has day of birth on the day " + day);		// Month January		customerIni.setDateOfBirth(LocalDate.of(year - age, 1, day));		assertEquals( 1,				customerIni.getDateOfBirth().getMonthValue(), customerIni.getClass() + " has day of birth in January");		// set ager 60		age = 60;		customerIni.setDateOfBirth(LocalDate.of(year - age, month, day));		assertEquals(								LocalDate.of(year - age, month, day), customerIni.getDateOfBirth(), customerIni.getClass() + " has day of birth in the year" + (year - age)				+ ", is to old and since no object");		// set age leap year		customerIni.setDateOfBirth(LocalDate.of(1964, 2, 29));		assertNotNull(				customerIni.getDateOfBirth(), customerIni.getClass() + " has day of birth on 29th of february 1964 and is since an object");	}	// set wrong date, z. B. 30.2.1967	// Exception expected	// @Test(expected = DateTimeException.class)	@Test	public void testCustomerVOSetDateOfBirthWithException() {				Assertions.assertThrows(DateTimeException.class, () ->		customerIni.setDateOfBirth(LocalDate.of(1967, 2, 30)));	}		@Test	public void testCustomerVOCalculateAgeDateOfBirthNull() throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {		LocalDate today = LocalDate.now();		int year = today.getYear();		int month = today.getMonthValue();		int day = today.getDayOfMonth();				Class<CustomerVO> customerClass =   CustomerVO.class;  		Field field = customerClass.getDeclaredField("dateOfBirth");		field.setAccessible(true);				final CustomerVO myCustomer;		try {			myCustomer = new CustomerVO("lastname","firstname",LocalDate.of(year -30,month, day));				field.set(myCustomer, null);				Exception exception = Assertions.assertThrows(CustomerNoDateOfBirthException.class, () ->		myCustomer.calculateAge());		assertEquals("Internal error: No date of birth.", exception.getMessage());		} catch (NullPointerException | CustomerTooYoungException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}		@Test	public void testCustomerVOCalculateAgeTOOYoungNoExcption() throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException, NullPointerException, CustomerTooYoungException, CustomerNoDateOfBirthException {		int alter = 16;		LocalDate today = LocalDate.now();		int year = today.getYear();		int month = today.getMonthValue();		int day = today.getDayOfMonth();				Class<CustomerVO> customerClass =   CustomerVO.class;  		Field field = customerClass.getDeclaredField("dateOfBirth");		field.setAccessible(true);				final CustomerVO myCustomer;				myCustomer = new CustomerVO("lastname","firstname",LocalDate.of(year -30,month, day));				field.set(myCustomer,LocalDate.of(year - alter,month, day));						myCustomer.calculateAge();			}	@Test	public void testCustomerVOCalculateAge() throws NullPointerException, CustomerTooYoungException, CustomerNoDateOfBirthException {		int alter;		LocalDate today = LocalDate.now();		LocalDate myDate;		int year = today.getYear();		int month = today.getMonthValue();		int day = today.getDayOfMonth();				// 18 years old		alter = 18;		customerIni.setDateOfBirth(LocalDate.of(year - alter, month, day));		assertEquals( 18, customerIni.calculateAge(), customerIni.getClass() + " has the age " + alter);		// 60 years old		alter = 60;		customerIni.setDateOfBirth(LocalDate.of(year - alter, month, day));		assertEquals( alter, customerIni.calculateAge(), customerIni.getClass() + " has the age " + alter);		// 60 years old minus 1 day		myDate = today.minusYears(60);		myDate = myDate.plusDays(1);		customerIni.setDateOfBirth(myDate);		assertEquals( 59, customerIni.calculateAge(), customerIni.getClass() + " has the age 1 Tag vor dem 60. Geb.");		// 71 years old		alter = 71;		customerIni.setDateOfBirth(LocalDate.of(year - alter, month, day));		assertEquals(alter, customerIni.calculateAge(), customerIni.getClass() + " has the age " + alter);	}	@Test	public void testCustomerVOEquals() throws NullPointerException, CustomerTooYoungException {		customerY = customerX;		customerZ = customerY;		// For any non-null reference value x, x.equals(null) should return		// false.		assertFalse(customerX.equals(null), "For any non-null reference value x, x.equals(null) should return false.");		// It is reflexive: for any non-null reference value x, x.equals(x)		// should return true.		assertTrue(				customerY.equals(customerY), "It is reflexive: for any non-null reference value x, x.equals(x) should return true. ");		// It is symmetric: for any non-null reference values x and y,		// x.equals(y) should return true if and only if y.equals(x) returns		// true.		assertTrue(								customerX.equals(customerY) == customerY.equals(customerX), "It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true. ");		// It is transitive: for any non-null reference values x, y, and z, if		// x.equals(y) returns true and y.equals(z) returns true, then		// x.equals(z) should return true.		assertTrue(								(customerX.equals(customerY) && customerY.equals(customerZ)) ? customerX.equals(customerZ) : false, "It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. ");		// Equals		assertTrue(				customerY.equals(customerX), customerY.getClass() + " equals arbeitet bei gleichen Objekten richtig ");		customerZ = new CustomerVO("Anders", "Hans", LocalDate.of(1999, 12, 31));		assertFalse(				customerZ.equals(customerX), customerZ.getClass() + " equals arbeitet bei ungleichen Objekten richtig ");		assertFalse( customerZ.equals(new PizzaVO()), customerZ.getClass() + " equals arbeitet bei falschen Objekten (Nicht-" + customerZ.getClass()		+ " richtig ");	}	@Test	public void testCustomerVOEqualsHashCode() throws NullPointerException, CustomerTooYoungException {		customerX = new CustomerVO("Nachname", "Vorname", LocalDate.of(1969, 10, 11));		customerY = customerX;		// Simliar objects provide similar hashcode		assertTrue(				customerX.equals(customerY) == (customerX.hashCode() == customerY.hashCode()),"Simliar objects provide similar hashcode");	}}